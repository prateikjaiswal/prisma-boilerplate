// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  client: (where?: ClientWhereInput) => Promise<boolean>;
  cost: (where?: CostWhereInput) => Promise<boolean>;
  costType: (where?: CostTypeWhereInput) => Promise<boolean>;
  project: (where?: ProjectWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  client: (where: ClientWhereUniqueInput) => ClientNullablePromise;
  clients: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Client>;
  clientsConnection: (args?: {
    where?: ClientWhereInput;
    orderBy?: ClientOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ClientConnectionPromise;
  cost: (where: CostWhereUniqueInput) => CostNullablePromise;
  costs: (args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Cost>;
  costsConnection: (args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CostConnectionPromise;
  costType: (where: CostTypeWhereUniqueInput) => CostTypeNullablePromise;
  costTypes: (args?: {
    where?: CostTypeWhereInput;
    orderBy?: CostTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<CostType>;
  costTypesConnection: (args?: {
    where?: CostTypeWhereInput;
    orderBy?: CostTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CostTypeConnectionPromise;
  project: (where: ProjectWhereUniqueInput) => ProjectNullablePromise;
  projects: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Project>;
  projectsConnection: (args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProjectConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createClient: (data: ClientCreateInput) => ClientPromise;
  updateClient: (args: {
    data: ClientUpdateInput;
    where: ClientWhereUniqueInput;
  }) => ClientPromise;
  updateManyClients: (args: {
    data: ClientUpdateManyMutationInput;
    where?: ClientWhereInput;
  }) => BatchPayloadPromise;
  upsertClient: (args: {
    where: ClientWhereUniqueInput;
    create: ClientCreateInput;
    update: ClientUpdateInput;
  }) => ClientPromise;
  deleteClient: (where: ClientWhereUniqueInput) => ClientPromise;
  deleteManyClients: (where?: ClientWhereInput) => BatchPayloadPromise;
  createCost: (data: CostCreateInput) => CostPromise;
  updateCost: (args: {
    data: CostUpdateInput;
    where: CostWhereUniqueInput;
  }) => CostPromise;
  updateManyCosts: (args: {
    data: CostUpdateManyMutationInput;
    where?: CostWhereInput;
  }) => BatchPayloadPromise;
  upsertCost: (args: {
    where: CostWhereUniqueInput;
    create: CostCreateInput;
    update: CostUpdateInput;
  }) => CostPromise;
  deleteCost: (where: CostWhereUniqueInput) => CostPromise;
  deleteManyCosts: (where?: CostWhereInput) => BatchPayloadPromise;
  createCostType: (data: CostTypeCreateInput) => CostTypePromise;
  updateCostType: (args: {
    data: CostTypeUpdateInput;
    where: CostTypeWhereUniqueInput;
  }) => CostTypePromise;
  updateManyCostTypes: (args: {
    data: CostTypeUpdateManyMutationInput;
    where?: CostTypeWhereInput;
  }) => BatchPayloadPromise;
  upsertCostType: (args: {
    where: CostTypeWhereUniqueInput;
    create: CostTypeCreateInput;
    update: CostTypeUpdateInput;
  }) => CostTypePromise;
  deleteCostType: (where: CostTypeWhereUniqueInput) => CostTypePromise;
  deleteManyCostTypes: (where?: CostTypeWhereInput) => BatchPayloadPromise;
  createProject: (data: ProjectCreateInput) => ProjectPromise;
  updateProject: (args: {
    data: ProjectUpdateInput;
    where: ProjectWhereUniqueInput;
  }) => ProjectPromise;
  updateManyProjects: (args: {
    data: ProjectUpdateManyMutationInput;
    where?: ProjectWhereInput;
  }) => BatchPayloadPromise;
  upsertProject: (args: {
    where: ProjectWhereUniqueInput;
    create: ProjectCreateInput;
    update: ProjectUpdateInput;
  }) => ProjectPromise;
  deleteProject: (where: ProjectWhereUniqueInput) => ProjectPromise;
  deleteManyProjects: (where?: ProjectWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  client: (
    where?: ClientSubscriptionWhereInput
  ) => ClientSubscriptionPayloadSubscription;
  cost: (
    where?: CostSubscriptionWhereInput
  ) => CostSubscriptionPayloadSubscription;
  costType: (
    where?: CostTypeSubscriptionWhereInput
  ) => CostTypeSubscriptionPayloadSubscription;
  project: (
    where?: ProjectSubscriptionWhereInput
  ) => ProjectSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProjectOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "title_ASC"
  | "title_DESC";

export type CostOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "amount_ASC"
  | "amount_DESC";

export type CostTypeOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "name_ASC"
  | "name_DESC";

export type ClientOrderByInput =
  | "ID_ASC"
  | "ID_DESC"
  | "name_ASC"
  | "name_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CostUpdateWithWhereUniqueWithoutProjectInput {
  where: CostWhereUniqueInput;
  data: CostUpdateWithoutProjectDataInput;
}

export type ClientWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface ProjectCreateOneWithoutCostsInput {
  create?: Maybe<ProjectCreateWithoutCostsInput>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface CostTypeUpdateManyDataInput {
  name?: Maybe<String>;
}

export interface ProjectCreateWithoutCostsInput {
  ID?: Maybe<ID_Input>;
  client?: Maybe<ClientCreateOneWithoutProjectsInput>;
  title?: Maybe<String>;
}

export interface CostTypeUpdateManyWithoutCostTypesInput {
  create?: Maybe<
    CostTypeCreateWithoutCostTypesInput[] | CostTypeCreateWithoutCostTypesInput
  >;
  delete?: Maybe<CostTypeWhereUniqueInput[] | CostTypeWhereUniqueInput>;
  connect?: Maybe<CostTypeWhereUniqueInput[] | CostTypeWhereUniqueInput>;
  set?: Maybe<CostTypeWhereUniqueInput[] | CostTypeWhereUniqueInput>;
  disconnect?: Maybe<CostTypeWhereUniqueInput[] | CostTypeWhereUniqueInput>;
  update?: Maybe<
    | CostTypeUpdateWithWhereUniqueWithoutCostTypesInput[]
    | CostTypeUpdateWithWhereUniqueWithoutCostTypesInput
  >;
  upsert?: Maybe<
    | CostTypeUpsertWithWhereUniqueWithoutCostTypesInput[]
    | CostTypeUpsertWithWhereUniqueWithoutCostTypesInput
  >;
  deleteMany?: Maybe<CostTypeScalarWhereInput[] | CostTypeScalarWhereInput>;
  updateMany?: Maybe<
    | CostTypeUpdateManyWithWhereNestedInput[]
    | CostTypeUpdateManyWithWhereNestedInput
  >;
}

export interface ClientCreateOneWithoutProjectsInput {
  create?: Maybe<ClientCreateWithoutProjectsInput>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface ProjectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  OR?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
  NOT?: Maybe<ProjectSubscriptionWhereInput[] | ProjectSubscriptionWhereInput>;
}

export interface ClientCreateWithoutProjectsInput {
  ID?: Maybe<ID_Input>;
  name?: Maybe<String>;
}

export interface ClientWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  projects_every?: Maybe<ProjectWhereInput>;
  projects_some?: Maybe<ProjectWhereInput>;
  projects_none?: Maybe<ProjectWhereInput>;
  AND?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  OR?: Maybe<ClientWhereInput[] | ClientWhereInput>;
  NOT?: Maybe<ClientWhereInput[] | ClientWhereInput>;
}

export interface CostTypeCreateOneWithoutParentCostTypeInput {
  create?: Maybe<CostTypeCreateWithoutParentCostTypeInput>;
  connect?: Maybe<CostTypeWhereUniqueInput>;
}

export interface ClientSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ClientWhereInput>;
  AND?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  OR?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
  NOT?: Maybe<ClientSubscriptionWhereInput[] | ClientSubscriptionWhereInput>;
}

export interface CostTypeCreateWithoutParentCostTypeInput {
  ID?: Maybe<ID_Input>;
  costs?: Maybe<CostCreateManyWithoutCostTypeInput>;
  costTypes?: Maybe<CostTypeCreateManyWithoutCostTypesInput>;
  name?: Maybe<String>;
}

export interface ProjectUpdateManyMutationInput {
  title?: Maybe<String>;
}

export interface ClientUpdateInput {
  name?: Maybe<String>;
  projects?: Maybe<ProjectUpdateManyWithoutClientInput>;
}

export interface ProjectCreateInput {
  ID?: Maybe<ID_Input>;
  client?: Maybe<ClientCreateOneWithoutProjectsInput>;
  costs?: Maybe<CostCreateManyWithoutProjectInput>;
  title?: Maybe<String>;
}

export interface ProjectUpdateManyWithoutClientInput {
  create?: Maybe<
    ProjectCreateWithoutClientInput[] | ProjectCreateWithoutClientInput
  >;
  delete?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  set?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  disconnect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
  update?: Maybe<
    | ProjectUpdateWithWhereUniqueWithoutClientInput[]
    | ProjectUpdateWithWhereUniqueWithoutClientInput
  >;
  upsert?: Maybe<
    | ProjectUpsertWithWhereUniqueWithoutClientInput[]
    | ProjectUpsertWithWhereUniqueWithoutClientInput
  >;
  deleteMany?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  updateMany?: Maybe<
    | ProjectUpdateManyWithWhereNestedInput[]
    | ProjectUpdateManyWithWhereNestedInput
  >;
}

export interface CostTypeUpdateInput {
  costs?: Maybe<CostUpdateManyWithoutCostTypeInput>;
  costTypes?: Maybe<CostTypeUpdateManyWithoutCostTypesInput>;
  name?: Maybe<String>;
  parentCostType?: Maybe<CostTypeUpdateOneWithoutParentCostTypeInput>;
}

export interface ProjectUpdateWithWhereUniqueWithoutClientInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutClientDataInput;
}

export type CostWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface ProjectUpdateWithoutClientDataInput {
  costs?: Maybe<CostUpdateManyWithoutProjectInput>;
  title?: Maybe<String>;
}

export interface CostUpdateInput {
  amount?: Maybe<Float>;
  costType?: Maybe<CostTypeUpdateOneWithoutCostsInput>;
  project?: Maybe<ProjectUpdateOneWithoutCostsInput>;
}

export interface CostUpdateManyWithoutProjectInput {
  create?: Maybe<
    CostCreateWithoutProjectInput[] | CostCreateWithoutProjectInput
  >;
  delete?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  connect?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  set?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  disconnect?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  update?: Maybe<
    | CostUpdateWithWhereUniqueWithoutProjectInput[]
    | CostUpdateWithWhereUniqueWithoutProjectInput
  >;
  upsert?: Maybe<
    | CostUpsertWithWhereUniqueWithoutProjectInput[]
    | CostUpsertWithWhereUniqueWithoutProjectInput
  >;
  deleteMany?: Maybe<CostScalarWhereInput[] | CostScalarWhereInput>;
  updateMany?: Maybe<
    CostUpdateManyWithWhereNestedInput[] | CostUpdateManyWithWhereNestedInput
  >;
}

export type CostTypeWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface CostTypeUpsertWithoutCostsInput {
  update: CostTypeUpdateWithoutCostsDataInput;
  create: CostTypeCreateWithoutCostsInput;
}

export interface ProjectUpdateManyDataInput {
  title?: Maybe<String>;
}

export interface CostUpdateWithoutProjectDataInput {
  amount?: Maybe<Float>;
  costType?: Maybe<CostTypeUpdateOneWithoutCostsInput>;
}

export type ProjectWhereUniqueInput = AtLeastOne<{
  ID: Maybe<ID_Input>;
}>;

export interface CostTypeUpdateOneWithoutCostsInput {
  create?: Maybe<CostTypeCreateWithoutCostsInput>;
  update?: Maybe<CostTypeUpdateWithoutCostsDataInput>;
  upsert?: Maybe<CostTypeUpsertWithoutCostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CostTypeWhereUniqueInput>;
}

export interface ProjectUpsertWithWhereUniqueWithoutClientInput {
  where: ProjectWhereUniqueInput;
  update: ProjectUpdateWithoutClientDataInput;
  create: ProjectCreateWithoutClientInput;
}

export interface CostTypeUpdateWithoutCostsDataInput {
  costTypes?: Maybe<CostTypeUpdateManyWithoutCostTypesInput>;
  name?: Maybe<String>;
  parentCostType?: Maybe<CostTypeUpdateOneWithoutParentCostTypeInput>;
}

export interface ProjectCreateManyWithoutClientInput {
  create?: Maybe<
    ProjectCreateWithoutClientInput[] | ProjectCreateWithoutClientInput
  >;
  connect?: Maybe<ProjectWhereUniqueInput[] | ProjectWhereUniqueInput>;
}

export interface CostTypeWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  costs_every?: Maybe<CostWhereInput>;
  costs_some?: Maybe<CostWhereInput>;
  costs_none?: Maybe<CostWhereInput>;
  costTypes_every?: Maybe<CostTypeWhereInput>;
  costTypes_some?: Maybe<CostTypeWhereInput>;
  costTypes_none?: Maybe<CostTypeWhereInput>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  parentCostType?: Maybe<CostTypeWhereInput>;
  AND?: Maybe<CostTypeWhereInput[] | CostTypeWhereInput>;
  OR?: Maybe<CostTypeWhereInput[] | CostTypeWhereInput>;
  NOT?: Maybe<CostTypeWhereInput[] | CostTypeWhereInput>;
}

export interface CostCreateManyWithoutProjectInput {
  create?: Maybe<
    CostCreateWithoutProjectInput[] | CostCreateWithoutProjectInput
  >;
  connect?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
}

export interface CostTypeUpdateWithWhereUniqueWithoutCostTypesInput {
  where: CostTypeWhereUniqueInput;
  data: CostTypeUpdateWithoutCostTypesDataInput;
}

export interface CostTypeCreateOneWithoutCostsInput {
  create?: Maybe<CostTypeCreateWithoutCostsInput>;
  connect?: Maybe<CostTypeWhereUniqueInput>;
}

export interface CostTypeUpdateWithoutCostTypesDataInput {
  costs?: Maybe<CostUpdateManyWithoutCostTypeInput>;
  name?: Maybe<String>;
  parentCostType?: Maybe<CostTypeUpdateOneWithoutParentCostTypeInput>;
}

export interface CostTypeCreateManyWithoutCostTypesInput {
  create?: Maybe<
    CostTypeCreateWithoutCostTypesInput[] | CostTypeCreateWithoutCostTypesInput
  >;
  connect?: Maybe<CostTypeWhereUniqueInput[] | CostTypeWhereUniqueInput>;
}

export interface CostUpdateManyWithoutCostTypeInput {
  create?: Maybe<
    CostCreateWithoutCostTypeInput[] | CostCreateWithoutCostTypeInput
  >;
  delete?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  connect?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  set?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  disconnect?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
  update?: Maybe<
    | CostUpdateWithWhereUniqueWithoutCostTypeInput[]
    | CostUpdateWithWhereUniqueWithoutCostTypeInput
  >;
  upsert?: Maybe<
    | CostUpsertWithWhereUniqueWithoutCostTypeInput[]
    | CostUpsertWithWhereUniqueWithoutCostTypeInput
  >;
  deleteMany?: Maybe<CostScalarWhereInput[] | CostScalarWhereInput>;
  updateMany?: Maybe<
    CostUpdateManyWithWhereNestedInput[] | CostUpdateManyWithWhereNestedInput
  >;
}

export interface CostCreateManyWithoutCostTypeInput {
  create?: Maybe<
    CostCreateWithoutCostTypeInput[] | CostCreateWithoutCostTypeInput
  >;
  connect?: Maybe<CostWhereUniqueInput[] | CostWhereUniqueInput>;
}

export interface CostUpdateWithWhereUniqueWithoutCostTypeInput {
  where: CostWhereUniqueInput;
  data: CostUpdateWithoutCostTypeDataInput;
}

export interface CostWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  costType?: Maybe<CostTypeWhereInput>;
  project?: Maybe<ProjectWhereInput>;
  AND?: Maybe<CostWhereInput[] | CostWhereInput>;
  OR?: Maybe<CostWhereInput[] | CostWhereInput>;
  NOT?: Maybe<CostWhereInput[] | CostWhereInput>;
}

export interface CostUpdateWithoutCostTypeDataInput {
  amount?: Maybe<Float>;
  project?: Maybe<ProjectUpdateOneWithoutCostsInput>;
}

export interface CostSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CostWhereInput>;
  AND?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
  OR?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
  NOT?: Maybe<CostSubscriptionWhereInput[] | CostSubscriptionWhereInput>;
}

export interface ProjectUpdateOneWithoutCostsInput {
  create?: Maybe<ProjectCreateWithoutCostsInput>;
  update?: Maybe<ProjectUpdateWithoutCostsDataInput>;
  upsert?: Maybe<ProjectUpsertWithoutCostsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectUpdateInput {
  client?: Maybe<ClientUpdateOneWithoutProjectsInput>;
  costs?: Maybe<CostUpdateManyWithoutProjectInput>;
  title?: Maybe<String>;
}

export interface ProjectUpdateWithoutCostsDataInput {
  client?: Maybe<ClientUpdateOneWithoutProjectsInput>;
  title?: Maybe<String>;
}

export interface CostTypeCreateInput {
  ID?: Maybe<ID_Input>;
  costs?: Maybe<CostCreateManyWithoutCostTypeInput>;
  costTypes?: Maybe<CostTypeCreateManyWithoutCostTypesInput>;
  name?: Maybe<String>;
  parentCostType?: Maybe<CostTypeCreateOneWithoutParentCostTypeInput>;
}

export interface ClientUpdateOneWithoutProjectsInput {
  create?: Maybe<ClientCreateWithoutProjectsInput>;
  update?: Maybe<ClientUpdateWithoutProjectsDataInput>;
  upsert?: Maybe<ClientUpsertWithoutProjectsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<ClientWhereUniqueInput>;
}

export interface CostCreateInput {
  ID?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  costType?: Maybe<CostTypeCreateOneWithoutCostsInput>;
  project?: Maybe<ProjectCreateOneWithoutCostsInput>;
}

export interface ClientUpdateWithoutProjectsDataInput {
  name?: Maybe<String>;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface ClientUpsertWithoutProjectsInput {
  update: ClientUpdateWithoutProjectsDataInput;
  create: ClientCreateWithoutProjectsInput;
}

export interface CostUpsertWithWhereUniqueWithoutProjectInput {
  where: CostWhereUniqueInput;
  update: CostUpdateWithoutProjectDataInput;
  create: CostCreateWithoutProjectInput;
}

export interface ProjectUpsertWithoutCostsInput {
  update: ProjectUpdateWithoutCostsDataInput;
  create: ProjectCreateWithoutCostsInput;
}

export interface ProjectCreateWithoutClientInput {
  ID?: Maybe<ID_Input>;
  costs?: Maybe<CostCreateManyWithoutProjectInput>;
  title?: Maybe<String>;
}

export interface CostUpsertWithWhereUniqueWithoutCostTypeInput {
  where: CostWhereUniqueInput;
  update: CostUpdateWithoutCostTypeDataInput;
  create: CostCreateWithoutCostTypeInput;
}

export interface CostTypeCreateWithoutCostsInput {
  ID?: Maybe<ID_Input>;
  costTypes?: Maybe<CostTypeCreateManyWithoutCostTypesInput>;
  name?: Maybe<String>;
  parentCostType?: Maybe<CostTypeCreateOneWithoutParentCostTypeInput>;
}

export interface CostScalarWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  amount_not?: Maybe<Float>;
  amount_in?: Maybe<Float[] | Float>;
  amount_not_in?: Maybe<Float[] | Float>;
  amount_lt?: Maybe<Float>;
  amount_lte?: Maybe<Float>;
  amount_gt?: Maybe<Float>;
  amount_gte?: Maybe<Float>;
  AND?: Maybe<CostScalarWhereInput[] | CostScalarWhereInput>;
  OR?: Maybe<CostScalarWhereInput[] | CostScalarWhereInput>;
  NOT?: Maybe<CostScalarWhereInput[] | CostScalarWhereInput>;
}

export interface CostCreateWithoutCostTypeInput {
  ID?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  project?: Maybe<ProjectCreateOneWithoutCostsInput>;
}

export interface CostUpdateManyWithWhereNestedInput {
  where: CostScalarWhereInput;
  data: CostUpdateManyDataInput;
}

export interface ProjectWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  client?: Maybe<ClientWhereInput>;
  costs_every?: Maybe<CostWhereInput>;
  costs_some?: Maybe<CostWhereInput>;
  costs_none?: Maybe<CostWhereInput>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  OR?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
  NOT?: Maybe<ProjectWhereInput[] | ProjectWhereInput>;
}

export interface CostUpdateManyDataInput {
  amount?: Maybe<Float>;
}

export interface CostUpdateManyMutationInput {
  amount?: Maybe<Float>;
}

export interface CostTypeUpdateOneWithoutParentCostTypeInput {
  create?: Maybe<CostTypeCreateWithoutParentCostTypeInput>;
  update?: Maybe<CostTypeUpdateWithoutParentCostTypeDataInput>;
  upsert?: Maybe<CostTypeUpsertWithoutParentCostTypeInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<CostTypeWhereUniqueInput>;
}

export interface ProjectScalarWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  OR?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
  NOT?: Maybe<ProjectScalarWhereInput[] | ProjectScalarWhereInput>;
}

export interface CostTypeUpdateWithoutParentCostTypeDataInput {
  costs?: Maybe<CostUpdateManyWithoutCostTypeInput>;
  costTypes?: Maybe<CostTypeUpdateManyWithoutCostTypesInput>;
  name?: Maybe<String>;
}

export interface CostCreateWithoutProjectInput {
  ID?: Maybe<ID_Input>;
  amount?: Maybe<Float>;
  costType?: Maybe<CostTypeCreateOneWithoutCostsInput>;
}

export interface CostTypeUpdateManyWithWhereNestedInput {
  where: CostTypeScalarWhereInput;
  data: CostTypeUpdateManyDataInput;
}

export interface CostTypeScalarWhereInput {
  ID?: Maybe<ID_Input>;
  ID_not?: Maybe<ID_Input>;
  ID_in?: Maybe<ID_Input[] | ID_Input>;
  ID_not_in?: Maybe<ID_Input[] | ID_Input>;
  ID_lt?: Maybe<ID_Input>;
  ID_lte?: Maybe<ID_Input>;
  ID_gt?: Maybe<ID_Input>;
  ID_gte?: Maybe<ID_Input>;
  ID_contains?: Maybe<ID_Input>;
  ID_not_contains?: Maybe<ID_Input>;
  ID_starts_with?: Maybe<ID_Input>;
  ID_not_starts_with?: Maybe<ID_Input>;
  ID_ends_with?: Maybe<ID_Input>;
  ID_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  AND?: Maybe<CostTypeScalarWhereInput[] | CostTypeScalarWhereInput>;
  OR?: Maybe<CostTypeScalarWhereInput[] | CostTypeScalarWhereInput>;
  NOT?: Maybe<CostTypeScalarWhereInput[] | CostTypeScalarWhereInput>;
}

export interface CostTypeUpsertWithWhereUniqueWithoutCostTypesInput {
  where: CostTypeWhereUniqueInput;
  update: CostTypeUpdateWithoutCostTypesDataInput;
  create: CostTypeCreateWithoutCostTypesInput;
}

export interface CostTypeUpsertWithoutParentCostTypeInput {
  update: CostTypeUpdateWithoutParentCostTypeDataInput;
  create: CostTypeCreateWithoutParentCostTypeInput;
}

export interface CostTypeCreateWithoutCostTypesInput {
  ID?: Maybe<ID_Input>;
  costs?: Maybe<CostCreateManyWithoutCostTypeInput>;
  name?: Maybe<String>;
  parentCostType?: Maybe<CostTypeCreateOneWithoutParentCostTypeInput>;
}

export interface ClientCreateInput {
  ID?: Maybe<ID_Input>;
  name?: Maybe<String>;
  projects?: Maybe<ProjectCreateManyWithoutClientInput>;
}

export interface ClientUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CostTypeUpdateManyMutationInput {
  name?: Maybe<String>;
}

export interface CostTypeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CostTypeWhereInput>;
  AND?: Maybe<
    CostTypeSubscriptionWhereInput[] | CostTypeSubscriptionWhereInput
  >;
  OR?: Maybe<CostTypeSubscriptionWhereInput[] | CostTypeSubscriptionWhereInput>;
  NOT?: Maybe<
    CostTypeSubscriptionWhereInput[] | CostTypeSubscriptionWhereInput
  >;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ProjectPreviousValues {
  ID: ID_Output;
  title?: String;
}

export interface ProjectPreviousValuesPromise
  extends Promise<ProjectPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface ProjectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProjectPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ClientEdge {
  node: Client;
  cursor: String;
}

export interface ClientEdgePromise extends Promise<ClientEdge>, Fragmentable {
  node: <T = ClientPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ClientEdgeSubscription
  extends Promise<AsyncIterator<ClientEdge>>,
    Fragmentable {
  node: <T = ClientSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Project {
  ID: ID_Output;
  title?: String;
}

export interface ProjectPromise extends Promise<Project>, Fragmentable {
  ID: () => Promise<ID_Output>;
  client: <T = ClientPromise>() => T;
  costs: <T = FragmentableArray<Cost>>(args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
}

export interface ProjectSubscription
  extends Promise<AsyncIterator<Project>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  client: <T = ClientSubscription>() => T;
  costs: <T = Promise<AsyncIterator<CostSubscription>>>(args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<AsyncIterator<String>>;
}

export interface ProjectNullablePromise
  extends Promise<Project | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  client: <T = ClientPromise>() => T;
  costs: <T = FragmentableArray<Cost>>(args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  title: () => Promise<String>;
}

export interface CostTypePreviousValues {
  ID: ID_Output;
  name?: String;
}

export interface CostTypePreviousValuesPromise
  extends Promise<CostTypePreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CostTypePreviousValuesSubscription
  extends Promise<AsyncIterator<CostTypePreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProject {
  count: Int;
}

export interface AggregateProjectPromise
  extends Promise<AggregateProject>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProjectSubscription
  extends Promise<AsyncIterator<AggregateProject>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProjectConnection {
  pageInfo: PageInfo;
  edges: ProjectEdge[];
}

export interface ProjectConnectionPromise
  extends Promise<ProjectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProjectEdge>>() => T;
  aggregate: <T = AggregateProjectPromise>() => T;
}

export interface ProjectConnectionSubscription
  extends Promise<AsyncIterator<ProjectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProjectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProjectSubscription>() => T;
}

export interface ClientConnection {
  pageInfo: PageInfo;
  edges: ClientEdge[];
}

export interface ClientConnectionPromise
  extends Promise<ClientConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ClientEdge>>() => T;
  aggregate: <T = AggregateClientPromise>() => T;
}

export interface ClientConnectionSubscription
  extends Promise<AsyncIterator<ClientConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ClientEdgeSubscription>>>() => T;
  aggregate: <T = AggregateClientSubscription>() => T;
}

export interface CostTypeEdge {
  node: CostType;
  cursor: String;
}

export interface CostTypeEdgePromise
  extends Promise<CostTypeEdge>,
    Fragmentable {
  node: <T = CostTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CostTypeEdgeSubscription
  extends Promise<AsyncIterator<CostTypeEdge>>,
    Fragmentable {
  node: <T = CostTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CostTypeSubscriptionPayload {
  mutation: MutationType;
  node: CostType;
  updatedFields: String[];
  previousValues: CostTypePreviousValues;
}

export interface CostTypeSubscriptionPayloadPromise
  extends Promise<CostTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CostTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CostTypePreviousValuesPromise>() => T;
}

export interface CostTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CostTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CostTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CostTypePreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CostType {
  ID: ID_Output;
  name?: String;
}

export interface CostTypePromise extends Promise<CostType>, Fragmentable {
  ID: () => Promise<ID_Output>;
  costs: <T = FragmentableArray<Cost>>(args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  costTypes: <T = FragmentableArray<CostType>>(args?: {
    where?: CostTypeWhereInput;
    orderBy?: CostTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  parentCostType: <T = CostTypePromise>() => T;
}

export interface CostTypeSubscription
  extends Promise<AsyncIterator<CostType>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  costs: <T = Promise<AsyncIterator<CostSubscription>>>(args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  costTypes: <T = Promise<AsyncIterator<CostTypeSubscription>>>(args?: {
    where?: CostTypeWhereInput;
    orderBy?: CostTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<AsyncIterator<String>>;
  parentCostType: <T = CostTypeSubscription>() => T;
}

export interface CostTypeNullablePromise
  extends Promise<CostType | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  costs: <T = FragmentableArray<Cost>>(args?: {
    where?: CostWhereInput;
    orderBy?: CostOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  costTypes: <T = FragmentableArray<CostType>>(args?: {
    where?: CostTypeWhereInput;
    orderBy?: CostTypeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  name: () => Promise<String>;
  parentCostType: <T = CostTypePromise>() => T;
}

export interface AggregateCost {
  count: Int;
}

export interface AggregateCostPromise
  extends Promise<AggregateCost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCostSubscription
  extends Promise<AsyncIterator<AggregateCost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Client {
  ID: ID_Output;
  name?: String;
}

export interface ClientPromise extends Promise<Client>, Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  projects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClientSubscription
  extends Promise<AsyncIterator<Client>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  projects: <T = Promise<AsyncIterator<ProjectSubscription>>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ClientNullablePromise
  extends Promise<Client | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
  projects: <T = FragmentableArray<Project>>(args?: {
    where?: ProjectWhereInput;
    orderBy?: ProjectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface CostConnection {
  pageInfo: PageInfo;
  edges: CostEdge[];
}

export interface CostConnectionPromise
  extends Promise<CostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CostEdge>>() => T;
  aggregate: <T = AggregateCostPromise>() => T;
}

export interface CostConnectionSubscription
  extends Promise<AsyncIterator<CostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CostEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCostSubscription>() => T;
}

export interface ClientSubscriptionPayload {
  mutation: MutationType;
  node: Client;
  updatedFields: String[];
  previousValues: ClientPreviousValues;
}

export interface ClientSubscriptionPayloadPromise
  extends Promise<ClientSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ClientPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ClientPreviousValuesPromise>() => T;
}

export interface ClientSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ClientSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ClientSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ClientPreviousValuesSubscription>() => T;
}

export interface ProjectEdge {
  node: Project;
  cursor: String;
}

export interface ProjectEdgePromise extends Promise<ProjectEdge>, Fragmentable {
  node: <T = ProjectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProjectEdgeSubscription
  extends Promise<AsyncIterator<ProjectEdge>>,
    Fragmentable {
  node: <T = ProjectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CostTypeConnection {
  pageInfo: PageInfo;
  edges: CostTypeEdge[];
}

export interface CostTypeConnectionPromise
  extends Promise<CostTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CostTypeEdge>>() => T;
  aggregate: <T = AggregateCostTypePromise>() => T;
}

export interface CostTypeConnectionSubscription
  extends Promise<AsyncIterator<CostTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CostTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCostTypeSubscription>() => T;
}

export interface CostPreviousValues {
  ID: ID_Output;
  amount?: Float;
}

export interface CostPreviousValuesPromise
  extends Promise<CostPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
}

export interface CostPreviousValuesSubscription
  extends Promise<AsyncIterator<CostPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
}

export interface CostSubscriptionPayload {
  mutation: MutationType;
  node: Cost;
  updatedFields: String[];
  previousValues: CostPreviousValues;
}

export interface CostSubscriptionPayloadPromise
  extends Promise<CostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CostPreviousValuesPromise>() => T;
}

export interface CostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CostPreviousValuesSubscription>() => T;
}

export interface Cost {
  ID: ID_Output;
  amount?: Float;
}

export interface CostPromise extends Promise<Cost>, Fragmentable {
  ID: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  costType: <T = CostTypePromise>() => T;
  project: <T = ProjectPromise>() => T;
}

export interface CostSubscription
  extends Promise<AsyncIterator<Cost>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  amount: () => Promise<AsyncIterator<Float>>;
  costType: <T = CostTypeSubscription>() => T;
  project: <T = ProjectSubscription>() => T;
}

export interface CostNullablePromise
  extends Promise<Cost | null>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  amount: () => Promise<Float>;
  costType: <T = CostTypePromise>() => T;
  project: <T = ProjectPromise>() => T;
}

export interface ClientPreviousValues {
  ID: ID_Output;
  name?: String;
}

export interface ClientPreviousValuesPromise
  extends Promise<ClientPreviousValues>,
    Fragmentable {
  ID: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface ClientPreviousValuesSubscription
  extends Promise<AsyncIterator<ClientPreviousValues>>,
    Fragmentable {
  ID: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface ProjectSubscriptionPayload {
  mutation: MutationType;
  node: Project;
  updatedFields: String[];
  previousValues: ProjectPreviousValues;
}

export interface ProjectSubscriptionPayloadPromise
  extends Promise<ProjectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProjectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProjectPreviousValuesPromise>() => T;
}

export interface ProjectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProjectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProjectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProjectPreviousValuesSubscription>() => T;
}

export interface AggregateCostType {
  count: Int;
}

export interface AggregateCostTypePromise
  extends Promise<AggregateCostType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCostTypeSubscription
  extends Promise<AsyncIterator<AggregateCostType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateClient {
  count: Int;
}

export interface AggregateClientPromise
  extends Promise<AggregateClient>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateClientSubscription
  extends Promise<AsyncIterator<AggregateClient>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CostEdge {
  node: Cost;
  cursor: String;
}

export interface CostEdgePromise extends Promise<CostEdge>, Fragmentable {
  node: <T = CostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CostEdgeSubscription
  extends Promise<AsyncIterator<CostEdge>>,
    Fragmentable {
  node: <T = CostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Client",
    embedded: false
  },
  {
    name: "Cost",
    embedded: false
  },
  {
    name: "CostType",
    embedded: false
  },
  {
    name: "Project",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: `http://localhost:4466`
});
export const prisma = new Prisma();
